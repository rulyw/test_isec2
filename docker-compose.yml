version: '3.8'

services:
  # Docker-in-Docker service
  dind:
    image: docker:20.10-dind  # Docker-in-Docker image
    privileged: true          # Allows Docker inside Docker (privileged mode)
    environment:
      DOCKER_TLS_CERTDIR: ""  # Disables TLS, needed for Docker-in-Docker
    volumes:
      - dind-data:/var/lib/docker  # Persistent Docker layer cache
    networks:
      - jenkins_network

  # Jenkins service
  jenkins:
    image: jenkins/jenkins:lts  # Official Jenkins LTS image
    container_name: jenkins-ci
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false  # Skip Jenkins setup wizard
      - JENKINS_OPTS=--prefix=/jenkins  # Optional: Configure Jenkins URL prefix (if necessary)
    volumes:
      - jenkins_home:/var/jenkins_home  # Persistent Jenkins home directory
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket to allow Jenkins to communicate with Docker
    ports:
      - "8080:8080"  # Jenkins UI accessible on port 8080
      - "50000:50000"  # Jenkins agent port
    networks:
      - jenkins_network
    user: "jenkins:jenkins"  # Ensure Jenkins runs as a non-root user (with limited privileges)

    # Disable anonymous access by configuring the security realm and authorization
    entrypoint: /bin/tini -- /usr/local/bin/jenkins.sh

    # Set Jenkins environment variables (optional)
    environment:
      - JENKINS_OPTS=--httpPort=8080

    # Security hardening (to disable anonymous access)
    # This should be handled by configuring the Jenkins security settings after initial setup.
    # The `JENKINS_HOME` volume should also be properly secured on the host.

# Named Volumes
volumes:
  jenkins_home:  # Volume to store Jenkins data (persistent storage)
  dind-data:     # Volume to store Docker layer cache (persistent storage)

# Networks
networks:
  jenkins_network:  # Define a custom network for communication between services
    driver: bridge
